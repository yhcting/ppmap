CFLAGS+= -Wall
LDFLAGS+= -static
LIBFLAGS+= -lpthread
CC=gcc
C_COMPILE=$(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
C_DEPENDENCIES=-Wp,-MD,$(DEPDIR)$(*F).P
C_LINK=$(CC) $(CFLAGS) $(LDFLAGS)
AR=ar
AR_CMD=$(AR) cr
VERSION=1.0

DISTDIR=$(top)$(shell basename $(top))-$(VERSION)
DEPDIR=.deps/

# Target name of dependency file generated by GCC, is just xxx.o
# So, we need post processing to handle it properly.
# To avoid this overhead... we don't use output directory.!
OUTDIR=

TARGET=$(OUTDIR)ppmap

INCLUDES=
SOURCES=main.c sock.c
OBJ=$(subst .c,.o, $(addprefix $(OUTDIR),$(SOURCES)))
DEP_FILES=$(subst .c,.P, $(addprefix $(DEPDIR),$(SOURCES)))


all: $(TARGET)

DEPS_MAGIC := $(shell mkdir $(DEPDIR) > /dev/null 2>&1 || :)
OUTS_MAGIC := $(shell mkdir $(OUTDIR) > /dev/null 2>&1 || :)

# simply ignore file which doesn't exist. (At first these files don't exist..)
-include $(DEP_FILES)

$(OUTDIR)%.o: %.c
	@echo '$(C_COMPILE) -o $@ -c $<'; \
	$(C_COMPILE) $(C_DEPENDENCIES) -o $@ -c $<

$(TARGET): $(OBJ)
	@echo '$(C_LINK) -o $@ $^'; \
	$(C_LINK) -o  $@ $^ $(LIBFLAGS)


clean:
	rm -f *.mod *.o *.obj .lo $(TARGET)
	rm -rf $(DEPDIR)
	rm -rf $(OUTDIR)


# End of Makefile
